// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserGetterClient is the client API for UserGetter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGetterClient interface {
	GetUser(ctx context.Context, in *SingleUserRequest, opts ...grpc.CallOption) (*SingleUserResponse, error)
}

type userGetterClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGetterClient(cc grpc.ClientConnInterface) UserGetterClient {
	return &userGetterClient{cc}
}

func (c *userGetterClient) GetUser(ctx context.Context, in *SingleUserRequest, opts ...grpc.CallOption) (*SingleUserResponse, error) {
	out := new(SingleUserResponse)
	err := c.cc.Invoke(ctx, "/UserGetter/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGetterServer is the server API for UserGetter service.
// All implementations must embed UnimplementedUserGetterServer
// for forward compatibility
type UserGetterServer interface {
	GetUser(context.Context, *SingleUserRequest) (*SingleUserResponse, error)
	mustEmbedUnimplementedUserGetterServer()
}

// UnimplementedUserGetterServer must be embedded to have forward compatible implementations.
type UnimplementedUserGetterServer struct {
}

func (UnimplementedUserGetterServer) GetUser(context.Context, *SingleUserRequest) (*SingleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserGetterServer) mustEmbedUnimplementedUserGetterServer() {}

// UnsafeUserGetterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGetterServer will
// result in compilation errors.
type UnsafeUserGetterServer interface {
	mustEmbedUnimplementedUserGetterServer()
}

func RegisterUserGetterServer(s grpc.ServiceRegistrar, srv UserGetterServer) {
	s.RegisterService(&UserGetter_ServiceDesc, srv)
}

func _UserGetter_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGetterServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserGetter/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGetterServer).GetUser(ctx, req.(*SingleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGetter_ServiceDesc is the grpc.ServiceDesc for UserGetter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGetter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserGetter",
	HandlerType: (*UserGetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserGetter_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/user.proto",
}

// UsersGetterClient is the client API for UsersGetter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersGetterClient interface {
	GetUsers(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*UsersResponse, error)
}

type usersGetterClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersGetterClient(cc grpc.ClientConnInterface) UsersGetterClient {
	return &usersGetterClient{cc}
}

func (c *usersGetterClient) GetUsers(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := c.cc.Invoke(ctx, "/UsersGetter/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersGetterServer is the server API for UsersGetter service.
// All implementations must embed UnimplementedUsersGetterServer
// for forward compatibility
type UsersGetterServer interface {
	GetUsers(context.Context, *UsersRequest) (*UsersResponse, error)
	mustEmbedUnimplementedUsersGetterServer()
}

// UnimplementedUsersGetterServer must be embedded to have forward compatible implementations.
type UnimplementedUsersGetterServer struct {
}

func (UnimplementedUsersGetterServer) GetUsers(context.Context, *UsersRequest) (*UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUsersGetterServer) mustEmbedUnimplementedUsersGetterServer() {}

// UnsafeUsersGetterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersGetterServer will
// result in compilation errors.
type UnsafeUsersGetterServer interface {
	mustEmbedUnimplementedUsersGetterServer()
}

func RegisterUsersGetterServer(s grpc.ServiceRegistrar, srv UsersGetterServer) {
	s.RegisterService(&UsersGetter_ServiceDesc, srv)
}

func _UsersGetter_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersGetterServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersGetter/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersGetterServer).GetUsers(ctx, req.(*UsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersGetter_ServiceDesc is the grpc.ServiceDesc for UsersGetter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersGetter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UsersGetter",
	HandlerType: (*UsersGetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _UsersGetter_GetUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/user.proto",
}
